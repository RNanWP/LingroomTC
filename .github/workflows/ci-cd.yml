name: CI/CD - Build, Test, e Deploy

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

    #  Integração Continua (CI)
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "npm"
          cache-dependency-path: Back-End/package-lock.json

      - name: Instalar dependências
        working-directory: ./Back-End
        run: npm install

      - name: Rodar os testes
        working-directory: ./Back-End
        run: npm test
        env:
          MONGO_URI: mongodb://localhost:27017/LingroomTC_Test
          JWT_SECRET: ${{ secrets.JWT_SECRET_TEST }}
          PORT: 3001

  # Entrega e Implementação Continua (CD)
  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build e Push da Imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: ./Back-End
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/lingroom-api:latest

      # Descomente esta seção quando tiver um servidor configurado
      # - name: Deploy no Servidor via SSH
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.SSH_HOST }}
      #     username: ${{ secrets.SSH_USER }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     script: |
      #       cd /caminho/para/seu/projeto/LingroomTC
      #       docker pull ${{ secrets.DOCKERHUB_USERNAME }}/lingroom-api:latest
      #       docker-compose up -d --no-deps api-1
      #       docker image prune -f
