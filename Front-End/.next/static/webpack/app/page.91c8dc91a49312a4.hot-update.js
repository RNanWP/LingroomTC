"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminApi: () => (/* binding */ adminApi),\n/* harmony export */   apiRequest: () => (/* binding */ apiRequest),\n/* harmony export */   authApi: () => (/* binding */ authApi),\n/* harmony export */   commentsApi: () => (/* binding */ commentsApi),\n/* harmony export */   postsApi: () => (/* binding */ postsApi)\n/* harmony export */ });\nconst API_BASE_URL = \"http://localhost:3000/api\" || 0;\n// Função para mapear _id para id em um objeto ou array de objetos\nconst mapId = (data)=>{\n    if (Array.isArray(data)) {\n        return data.map((item)=>mapId(item));\n    }\n    if (data && typeof data === \"object\" && data._id) {\n        const { _id, ...rest } = data;\n        return {\n            id: _id,\n            ...rest\n        };\n    }\n    return data;\n};\nconst apiRequest = async function(endpoint) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const token =  true ? localStorage.getItem(\"token\") : 0;\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...token && {\n                Authorization: \"Bearer \".concat(token)\n            },\n            ...options.headers\n        },\n        ...options\n    };\n    try {\n        const response = await fetch(\"\".concat(API_BASE_URL).concat(endpoint), config);\n        if (!response.ok) {\n            const errorData = await response.json().catch(()=>({}));\n            throw {\n                message: errorData.message || \"Erro HTTP! Status: \".concat(response.status),\n                status: response.status\n            };\n        }\n        if (response.status === 204) {\n            return undefined;\n        }\n        // <-- Mapeamento de _id para id\n        const data = await response.json();\n        return mapId(data); // <-- Mapeamento de _id para id\n    } catch (error) {\n        if (error && typeof error === \"object\" && \"status\" in error) {\n            throw error;\n        }\n        throw {\n            message: \"Ocorreu um erro de rede. Verifique sua conexão com o servidor da API.\",\n            status: 0\n        };\n    }\n};\n// --- API de Autenticação ---\nconst authApi = {\n    login: async (email, password)=>{\n        return apiRequest(\"/users/login\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                email,\n                password\n            })\n        });\n    },\n    register: async (name, email, password)=>{\n        return apiRequest(\"/users/register\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                name,\n                email,\n                password\n            })\n        });\n    }\n};\n// --- API de Posts ---\nconst postsApi = {\n    getAllPosts: async ()=>{\n        return apiRequest(\"/posts\");\n    },\n    getPost: async (id)=>{\n        return apiRequest(\"/posts/\".concat(id));\n    },\n    searchPosts: async (query)=>{\n        return apiRequest(\"/posts/search?q=\".concat(encodeURIComponent(query)));\n    },\n    createPost: async (title, content)=>{\n        return apiRequest(\"/posts\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                title,\n                content\n            })\n        });\n    },\n    updatePost: async (id, title, content)=>{\n        return apiRequest(\"/posts/\".concat(id), {\n            method: \"PUT\",\n            body: JSON.stringify({\n                title,\n                content\n            })\n        });\n    },\n    deletePost: async (id)=>{\n        return apiRequest(\"/posts/\".concat(id), {\n            method: \"DELETE\"\n        });\n    }\n};\n// --- API de Comentários ---\nconst commentsApi = {\n    getPostComments: async (postId)=>{\n        return apiRequest(\"/posts/\".concat(postId, \"/comments\"));\n    },\n    createComment: async (postId, content)=>{\n        return apiRequest(\"/posts/\".concat(postId, \"/comments\"), {\n            method: \"POST\",\n            body: JSON.stringify({\n                content\n            })\n        });\n    },\n    replyToComment: async (commentId, content)=>{\n        return apiRequest(\"/comments/\".concat(commentId, \"/reply\"), {\n            method: \"POST\",\n            body: JSON.stringify({\n                content\n            })\n        });\n    },\n    deleteComment: async (commentId)=>{\n        return apiRequest(\"/comments/\".concat(commentId), {\n            method: \"DELETE\"\n        });\n    }\n};\n// --- API de Administração ---\nconst adminApi = {\n    getAllPosts: async ()=>{\n        return apiRequest(\"/admin/posts\");\n    },\n    getAllUsers: async ()=>{\n        return apiRequest(\"/admin/users\");\n    },\n    getAllComments: async ()=>{\n        return apiRequest(\"/admin/comments\");\n    },\n    deleteUser: async (userId)=>{\n        return apiRequest(\"/admin/users/\".concat(userId), {\n            method: \"DELETE\"\n        });\n    },\n    deletePost: async (postId)=>{\n        return apiRequest(\"/admin/posts/\".concat(postId), {\n            method: \"DELETE\"\n        });\n    },\n    deleteComment: async (commentId)=>{\n        return apiRequest(\"/admin/comments/\".concat(commentId), {\n            method: \"DELETE\"\n        });\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});